{"version":3,"sources":["../src/index.ts"],"sourcesContent":["type ok<T> = { ok: T; error: null }\ntype error = { ok: null; error: Error }\n\n/**\n * @template T\n * @param {T} result\n * @returns {ok<T>}\n */\nconst ok = <T>(result: T): ok<T> => ({ ok: result, error: null })\n\n/**\n * @param {Error} error\n * @returns {error}\n */\nconst error = (error: Error): error => ({ ok: null, error })\n\n/**\n * @template T\n * @param {() => T} cb\n * @returns {ok<T> | error}\n */\nexport function recover<T>(cb: () => T): ok<T> | error {\n  let result: T\n\n  try {\n    result = cb()\n  } catch (err) {\n    if (err instanceof Error) {\n      return error(err)\n    }\n    return error(new Error(\"Unknown error occured\"))\n  }\n\n  return ok(result)\n}\n\n/**\n * @template T\n * @param {() => Promise<T>} cb\n * @returns {Promise<ok<T> | error>}\n */\nexport async function recoverAsync<T>(\n  cb: () => Promise<T>,\n): Promise<ok<T> | error> {\n  let result: T\n\n  try {\n    result = await cb()\n  } catch (err) {\n    if (err instanceof Error) {\n      return error(err)\n    }\n    return error(new Error(\"Unknown error occured\"))\n  }\n\n  return ok(result)\n}\n"],"mappings":";;;;AAQA,IAAMA,KAAK,wBAAIC,YAAsB;EAAED,IAAIC;EAAQC,OAAO;AAAK,IAApD;AAMX,IAAMA,QAAQ,wBAACA,YAAyB;EAAEF,IAAI;EAAME,OAAAA;AAAM,IAA5C;AAOP,SAASC,QAAWC,IAAW;AACpC,MAAIH;AAEJ,MAAI;AACFA,aAASG,GAAAA;EACX,SAASC,KAAK;AACZ,QAAIA,eAAeC,OAAO;AACxB,aAAOJ,MAAMG,GAAAA;IACf;AACA,WAAOH,MAAM,IAAII,MAAM,uBAAA,CAAA;EACzB;AAEA,SAAON,GAAGC,MAAAA;AACZ;AAbgBE;AAoBhB,eAAsBI,aACpBH,IAAoB;AAEpB,MAAIH;AAEJ,MAAI;AACFA,aAAS,MAAMG,GAAAA;EACjB,SAASC,KAAK;AACZ,QAAIA,eAAeC,OAAO;AACxB,aAAOJ,MAAMG,GAAAA;IACf;AACA,WAAOH,MAAM,IAAII,MAAM,uBAAA,CAAA;EACzB;AAEA,SAAON,GAAGC,MAAAA;AACZ;AAfsBM;","names":["ok","result","error","recover","cb","err","Error","recoverAsync"]}